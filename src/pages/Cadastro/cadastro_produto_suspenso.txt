import React from 'react';
import Navbar from '../../components/Menu/Navbar';
import { useForm } from "react-hook-form";
import { ErrorMessage } from '@hookform/error-message';
import './cadastro_produto.css';
import  api  from '../../components/Services/api';
import ListarCategoria from '../../components/Listas/listar_categoria';
import ListarSubcategoria from '../../components/Listas/listar_subcategoria';
import ListarUnidadedemedida from '../../components/Listas/listar_unidadedemedida';
const DarkMode = React.lazy(() => import('../../components/DarkMode'));

export default function Cadastro_produto() {

  const { register, handleSubmit, formState: { errors } } = useForm();
  const onSubmit = (data) => {
    console.log(data);
    data.codigoSubcategoria = Number(data.codigoSubcategoria);
    data.codigoUnidadeMedida = Number(data.codigoUnidadeMedida);
    data.quantidadeEstoqueAtual = Number(data.quantidadeEstoqueAtual);
    data.quantidadeEstoqueMaximo = Number(data.quantidadeEstoqueMaximo);
    data.quantidadeEstoqueMinimo = Number(data.quantidadeEstoqueMinimo);
    api.post("/produto", data);
    alert("Cadastro Realizado");
    //window.location.reload()
  }

  return (
  <>

  <div className="container grid-areas">

  <div className="header">

     <DarkMode />
     <Navbar />

  </div>
  
  <div className="body">

    <form className="produto_form" onSubmit = { handleSubmit(onSubmit) } >

    <div className="produto_titulo">
    <h1>Cadastrar Produto</h1>
    </div>

    <div className="produto_linha">

      <div className="produto_campo">

          <label htmlFor="nomeProduto">Nome do Produto</label>
          <input 
                 type="text" 
                 id="nomeProduto" 
                 name="nomeProduto"
                 {...register("nomeProduto", {
                  required: 'Preenchimento Obrigatório',
                })}
     
           />
           

          <div className="erro">
          <ErrorMessage errors={errors} name="nomeProduto">
            {({ messages }) => messages && Object.entries(messages).map(([type, message]) => ( <p key={type}>{message}</p>))}
          </ErrorMessage>

          </div>

      </div>

     

    </div>

    <div className="produto_linha">

      <div className="produto_campo">

      <label htmlFor="codCategoria">Categoria</label>
          <select 
                 type="text" 
                 id="codCategoria" 
                 name="codCategoria"
                 
           >
             <option selected disabled hidden> Selecione uma categoria </option>
             <ListarCategoria />
          </select>          

                      

      </div>

      <div className="produto_campo">

      <label htmlFor="codigoSubcategoria">Subcategoria</label>
      <select
       type="number" 
       id="codigoSubcategoria" 
       name="codigoSubcategoria"
       {...register("codigoSubcategoria", {
        required: 'Preenchimento Obrigatório'
      })}
>
<option selected disabled hidden> Selecione uma subcategoria </option>
   <ListarSubcategoria />
  </select>


</div>


      <div className="produto_campo">

          <label htmlFor="codigoUnidadeMedida">Unidade de Medida</label>
          <select 
                 type="number" 
                 id="codigoUnidadeMedida" 
                 name="codigoUnidadeMedida"
                 {...register("codigoUnidadeMedida", {
                  required: 'Preenchimento Obrigatório',
                })}
          >

          <option selected disabled hidden> Selecione uma unidade </option>
             <ListarUnidadedemedida />
          </select>
   
      </div>



      </div>



    <div className="produto_linha">
      <div className="produto_campo">
        <label htmlFor="descricaoProduto">Descrição</label>
        <textarea 
                 type="text" 
                 id="descricaoProduto" 
                 name="descricaoProduto"
                 {...register("descricaoProduto")}
           />

        <div className="erro">
        <ErrorMessage errors={errors} name="descricaoProduto">
        {({ messages }) => messages && Object.entries(messages).map(([type, message]) => ( <p key={type}>{message}</p>))}
        </ErrorMessage>
        </div>

      </div>  
      </div>








      <div className="produto_linha">

        <div className="produto_campo2">

          <label htmlFor="qtd_estoque_minimo">Qtd. de estoque mínimo</label>
          <input 
                 type="number" 
                 id="quantidadeEstoqueMinimo" 
                 name="quantidadeEstoqueMinimo"
                 {...register("quantidadeEstoqueMinimo", {
                  required: 'Preenchimento Obrigatório'
                })}
           />

          <div className="erro">                   
          <ErrorMessage errors={errors} name="quantidadeEstoqueMinimo">
          {({ messages }) => messages && Object.entries(messages).map(([type, message]) => ( <p key={type}>{message}</p>))}
          </ErrorMessage>
          </div>                        

        </div>

        <div className="produto_campo2">

          <label htmlFor="quantidadeEstoqueMaximo">Qtd. de estoque máximo</label>
          <input 
                 type="number" 
                 id="quantidadeEstoqueMaximo" 
                 name="quantidadeEstoqueMaximo"
                 {...register("quantidadeEstoqueMaximo", {
                  required: 'Preenchimento Obrigatório'
                })}
           />


          <div className="erro">                   
          <ErrorMessage errors={errors} name="quantidadeEstoqueMaximo">
          {({ messages }) => messages && Object.entries(messages).map(([type, message]) => ( <p key={type}>{message}</p>))}
          </ErrorMessage>
          </div>    

        </div>


      <div className="produto_campo2">

          <label htmlFor="quantidadeEstoqueAtual">Qtd. de estoque atual</label>
          <input 
                 type="number" 
                 id="quantidadeEstoqueAtual" 
                 name="quantidadeEstoqueAtual"
                 {...register("quantidadeEstoqueAtual", {
                  required: 'Preenchimento Obrigatório'
                })}
           />

          <div className="erro">                   
          <ErrorMessage errors={errors} name="quantidadeEstoqueAtual">
          {({ messages }) => messages && Object.entries(messages).map(([type, message]) => ( <p key={type}>{message}</p>))}
          </ErrorMessage>
          </div>    
                             
      </div>
    </div>

        <button type="submit">Cadastrar</button>
         
    </form>
    </div>

<div className="footer">
  <p>Projeto Integrador 2021 - 2022</p>
</div>
</div>
</>
  );
}